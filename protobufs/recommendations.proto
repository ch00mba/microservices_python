syntax = "proto3";

// Line 1 specifies that the file uses the proto3 syntax instead of the older proto2 version.

 
 enum BookCategory {
    MYSTERY = 0;
     SCIENCE_FICTION = 1;
     SELF_HELP = 2;
 }
 
// Lines 3 to 7 define your book categories, and each category is also assigned a numeric ID.


 message RecommendationRequest {
    int32 user_id = 1;
    BookCategory category = 2;
    int32 max_results = 3;
}

// Lines 9 to 13 define your API request. A message contains fields, each of a specific type. You’re using int32, which is a 32-bit integer, for the user_ID and max_results fields. You’re also using the BookCategory enum you defined above as the category type. In addition to each field having a name, it’s also assigned a numeric field ID. You can ignore this for now.

message BookRecommendation {
    int32 id = 1;
    string title = 2;
}

// Lines 15 to 18 define a new type that you can use for a book recommendation. It has a 32-bit integer ID and a string-based title.

message RecommendationResponse {
    repeated BookRecommendation recommendations = 1;
}

// Lines 20 to 22 define your Recommendations microservice response. Note the repeated keyword, which indicates that the response actually has a list of BookRecommendation objects.

service Recommendations {
    rpc Recommend (RecommendationRequest) returns (RecommendationResponse);
}

// Lines 24 to 26 define the method of the API. You can think of this like a function or a method on a class. It takes a RecommendationRequest and returns a RecommendationResponse.








